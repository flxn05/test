// Check for Web Authentication API support
if (!window.PublicKeyCredential) {
    document.getElementById('status').textContent = "Your browser does not support passkey authentication (WebAuthn).";
}

// Register Passkey
document.getElementById('registerButton').addEventListener('click', async () => {
    try {
        const options = {
            challenge: new Uint8Array(32), // Ideally, this would be a challenge generated by your server (mocked here)
            rp: {
                name: "Passkey Authentication Site"
            },
            user: {
                id: new TextEncoder().encode("user123"), // Unique user identifier
                name: "user@example.com",
                displayName: "User"
            },
            pubKeyCredParams: [{ type: "public-key", alg: -7 }],
            authenticatorSelection: {
                authenticatorAttachment: "platform",
                userVerification: "preferred"
            },
            timeout: 60000
        };

        const credential = await navigator.credentials.create({ publicKey: options });

        // Save the credential to localStorage (for demo purposes)
        localStorage.setItem('passkey', JSON.stringify(credential));

        document.getElementById('status').textContent = "Passkey registered successfully!";
    } catch (err) {
        document.getElementById('status').textContent = "Registration failed: " + err.message;
    }
});

// Login with Passkey
document.getElementById('loginButton').addEventListener('click', async () => {
    try {
        const savedCredential = localStorage.getItem('passkey');
        if (!savedCredential) {
            document.getElementById('status').textContent = "No passkey registered!";
            return;
        }

        const options = {
            challenge: new Uint8Array(32), // Ideally, this should be a challenge from your server (mocked here)
            allowCredentials: [
                {
                    type: "public-key",
                    id: JSON.parse(savedCredential).rawId
                }
            ],
            timeout: 60000,
            userVerification: "preferred"
        };

        const assertion = await navigator.credentials.get({ publicKey: options });

        // Mocking authentication by validating the result (you would normally verify this server-side)
        if (assertion) {
            document.getElementById('status').textContent = "Login successful!";
        } else {
            document.getElementById('status').textContent = "Login failed.";
        }
    } catch (err) {
        document.getElementById('status').textContent = "Login failed: " + err.message;
    }
});
